@page "/cardrequests"
@using System.Net.Http.Json
@using Infrastructure.ApiClient
@inject HttpClient httpClient

<MudText Typo="Typo.h6">Card Requests Dashboard</MudText>
<MudTable ServerData="@(new Func<TableState, Task<TableData<CardRequestDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <div style="border: none solid #084545; border-radius: 4px; width: 400px;">
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" Style="color: #084545; border: none; outline: none;" IconSize="Size.Medium" Class="mt-0 p-1"></MudTextField>
        </div>
        <MudSpacer />
        <MudText Typo="Typo.subtitle1" Class="text-center font-weight-bold text-black" style="color: #084545; font-weight: bold">Total Count: @totalItems</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(NewRequest)">New Request</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh style="color: #084545; font-weight: bold"><MudTableSortLabel SortLabel="externalId" T="CardRequestDto">Photo</MudTableSortLabel></MudTh>
        <MudTh style="color: #084545; font-weight: bold"><MudTableSortLabel SortLabel="externalId" T="CardRequestDto">Unique Id</MudTableSortLabel></MudTh>
        <MudTh style="color: #084545; font-weight: bold">Information</MudTh>
        <MudTh style="color: #084545; font-weight: bold"><MudTableSortLabel SortLabel="status" T="CardRequestDto">Request Date</MudTableSortLabel></MudTh>
        <MudTh style="color: #084545; font-weight: bold"><MudTableSortLabel SortLabel="status" T="CardRequestDto">Status</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <div style="position: relative; text-align: center;">
                <div style="max-width: 100px; max-height: 100px; position: relative;">
                    @if (@context.MemberData.PictureUrl is not null)
                    {
                        var ImageUri = Config[ConfigNames.ApiBaseUrl] + @context.MemberData.PictureUrl;
                        <img src="@ImageUri" alt="User Image" style="max-width: 100%; max-height: 100%; cursor: pointer;" onclick="enlargeImage(this)" />
                        <div style="position: absolute; bottom: -5px; left: 50%; transform: translateX(-50%); cursor: pointer; color: #084545; font-weight: bold; font-size:0.5em; text-decoration: underline;" onclick="enlargeImage(this.previousElementSibling)">ENLARGE</div>

                    }
                    else
                    {
                        <img src="ecard.jpg" alt="User Image" style="max-width: 100%; max-height: 100%; cursor: pointer;" onclick="enlargeImage(this)" />
                        <div style="position: absolute; bottom: -5px; left: 50%; transform: translateX(-50%); cursor: pointer; color: #084545; font-weight: bold; font-size:0.5em; text-decoration: underline;" onclick="enlargeImage(this.previousElementSibling)">ENLARGE</div>
                    }

                </div>
            </div>
        </MudTd>
        <MudTd DataLabel="Id">
            <MudLink style="color: #084545; font-weight: lighter" Href="@("/cardrequest/" + @context.Id)" Color="Color.Success" Underline="Underline.None">@context.ExternalId</MudLink>

        </MudTd>
        <MudTd>
            <div style="position: relative">
                <div class="" style="font: bolder; font-size:1.0em; color: #084545; font-weight: bold;">@context.MemberData.FirstName.ToUpper() @context.MemberData.LastName.ToUpper() @context.MemberData.MiddleName.ToUpper()</div>
                @foreach (var data in context.MemberData.CustomData.Take(2))
                {
                    <div class="text-black justify-content-start" style="font: bolder; font-size:0.8em">@data.Value</div>
                }


            </div>
        </MudTd>
        <MudTd>@DateTime.UtcNow.ToLocalTime()</MudTd>
        @if (@context.Status == CardRequestStatus.Pending)
        {
            <MudTd DataLabel="Name"><MudChip Color="Color.Warning">@context.Status</MudChip></MudTd>
            <MudTd>
                <!-- Buttons -->
                <div class="d-flex justify-content-between">
                    <MudButton Variant="Variant.Filled" Class="light-button-success mr-2" StartIcon="@Icons.Filled.Approval" OnClick="@(e => Approve(context.Id))" Disabled="BusySubmitting">
                        <MudIcon Icon="Icons.Filled.CheckCircleOutline" Size="Size.Small" />
                        <span class="text-success">Approve</span>
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Class="light-button-error ml-2" StartIcon="@Icons.Filled.Cancel" OnClick="@(e => Reject(context.Id))" Disabled="BusySubmitting">
                        <MudIcon Icon="Icons.Filled.Cancel" Size="Size.Small" />
                        <span class="text-error">Reject</span>
                    </MudButton>
                </div>
            </MudTd>
        }
        @if (@context.Status == CardRequestStatus.Approved)
        {
            <MudTd DataLabel="Name"><MudChip Color="Color.Success">@context.Status</MudChip></MudTd>
        }
        @if (@context.Status == CardRequestStatus.Cancelled)
        {
            <MudTd DataLabel="Name"><MudChip Color="Color.Secondary">@context.Status</MudChip></MudTd>
        }
        @if (@context.Status == CardRequestStatus.Rejected)
        {
            <MudTd DataLabel="Name"><MudChip Color="Color.Error">@context.Status</MudChip></MudTd>
        }
    </RowTemplate>

    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


<script>
    function enlargeImage(img) {
        // Create a modal or lightbox element to display the enlarged image
        var modal = document.createElement('div');
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        modal.style.zIndex = '9999';
        modal.style.display = 'flex';
        modal.style.alignItems = 'center';
        modal.style.justifyContent = 'center';

        var enlargedImg = document.createElement('img');
        enlargedImg.src = img.src;
        enlargedImg.style.maxWidth = '80%';
        enlargedImg.style.maxHeight = '80%';

        modal.appendChild(enlargedImg);

        // Close the modal when clicking outside the image
        modal.onclick = function () {
            modal.remove();
        };

        document.body.appendChild(modal);
    }
</script>
<style>
    .text-success {
        color: #4caf50; /* Green for approve */
    }

    .text-error {
        color: #f44336; /* Red for reject */
    }

    .text-warning {
        color: #ff9800; /* Orange for cancel */
    }

    .light-button-success {
        background-color: #e8f5e9; /* Light green */
    }

    .light-button-error {
        background-color: #ffebee; /* Light red */
    }

    .light-button-warning {
        background-color: #fff3e0; /* Light orange */
    }

    .text-success, .text-error, .text-warning {
        font-weight: bold;
        text-transform: capitalize;
    }
</style>