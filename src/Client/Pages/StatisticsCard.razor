@using MudBlazor
@using System.Threading.Tasks

<style>
    .card-content {
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    .auto-adjust-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }
</style>

<MudCard Style="margin: 16px; width: 300px; height: 150px; background-color: #6ACFC7;" Elevation="4">
    <MudCardContent Class="card-content">
        <MudText Typo="Typo.h6" Class="auto-adjust-text">@Title</MudText>
        <MudText Typo="Typo.h3" Class="auto-adjust-text">@AnimatedValue</MudText>
        <MudIcon Icon="@Icon" Class="ml-2" Style="color: #084545;"></MudIcon>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public string Icon { get; set; }

    private int AnimatedValue;

    protected override async Task OnInitializedAsync()
    {
        await AnimateValue(0, Value, 1500);  // Example time: 1500 milliseconds
    }

    private async Task AnimateValue(int start, int end, int duration)
    {
        int stepTime = (end != 0 ) ? duration / Math.Abs(end - start) : 0;
        stepTime = Math.Max(stepTime, 1);  // Ensure stepTime is at least 1 ms

        for (int i = start; i <= end; i++)
        {
            AnimatedValue = i;
            StateHasChanged();
            await Task.Delay(stepTime);
        }
    }
}
